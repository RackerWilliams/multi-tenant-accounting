<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY HEAD   '<command xmlns="http://docbook.org/ns/docbook">HEAD</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CODES       'Normal Response Code(s):'>
        <!ENTITY ERROR_CODES 'Error Response Code(s):'>

        <!ENTITY LONG_URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="4">URI</td>
              <td colspan="3">Description</td>
            </tr>
          </thead>'>
        <!ENTITY URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="1">URI</td>
              <td colspan="4">Description</td>
            </tr>
          </thead>'>


        <!-- Useful for specs -->
        <!ENTITY MAY    '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
        <!ENTITY SHOULD_NOT '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD NOT</emphasis>'>

]>

<article version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook"
         class="specification"
         status="draft">
    <info>
        <title>Multi-Tenancy in OpenStack</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Jorge</firstname>
                    <surname>Williams</surname>
                    <othername role="mi">L</othername>
                </personname>
                <email>jorge.williams@rackspace.com</email>
            </author>
            <author>
                <personname>
                    <firstname>Ziad</firstname>
                    <surname>Sawalha</surname>
                    <othername role="mi">N</othername>
                </personname>
                <email>ziad.sawalha@rackspace.com</email>
            </author>
            <author>
                <personname>
                    <firstname>Khaled</firstname>
                    <surname>Hussein</surname>
                </personname>
                <email>khaled.hussein@rackspace.com</email>
            </author>
        </authorgroup>
        <abstract>
            <para>
                As a cloud computing platform, OpenStack must support
                the concept of multi-tenancy. A common approach to
                organizing resources by 'tenant' across services is
                needed to be able to correlate usage tracking,
                auditing, authorization, etc... And within each
                multi-tenant service, the ability to identify each
                tenant's resources (for various reasons such as
                security, accounting, isolation, etc…) is also
                key. However, the definition of a 'tenant' will vary
                by operator and by deployment. This blueprint
                therefore proposes creating a lightweight standard for
                service developers to implement tenancy and resource
                grouping without a-priori knowledge of billing and
                accounting processes specific to the operator of an
                OpenStack deployment.
            </para>
            <para>
                The purpose of this blueprint is to define a standard
                method of organizing resources in OpenStack. Resource
                organization is important because most cloud service
                deployments are multi-tenant. Building multi-tenant
                services is complicated and often involves knowledge
                of buisness processes that vary from one organization
                to another. In this blueprint, we propose a method of
                organizing resources that allows multi-tenancy to be
                implemented on top of OpenStack services. This
                approach will lower barriers to service deleopers by
                allowing them to develop services without a-priori
                knowledge of billing and accounting processes of the
                organization in which the services are
                deployed. Likewise, organization will be given
                flexability in the manner in which they deploy and
                offer OpenStack services.
            </para>
        </abstract>
        <keywordset>
            <keyword>OpenStack</keyword>
            <keyword>Multi-Tenancy</keyword>
            <keyword>Resource Organization</keyword>
        </keywordset>
    </info>
    <section>
        <title>Rationale and Goals</title>
        <para>
        </para>
    </section>
    <section>
        <title>Specification Overview</title>
        <para>
        </para>
        <figure xml:id="both">
            <title>Multi-Tenancy Overview</title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" scale="65" format="svg"
                               fileref="images/AccountModel4.svg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section>
            <title>Accounts and Tenants</title>
            <para>
            </para>
        </section>
        <section>
            <title>Account Lifecycle</title>
            <para>
            </para>
        </section>
        <section>
            <title>Admin API</title>
            <para>
                A <emphasis role="italic">service API</emphasis> is an
                API that's made available to most clients &mdash; in
                most cases it is the public API that users consume.
                In contrast, an <emphasis role="italic">admin
                api</emphasis> is an implementation of the service API
                with additional calls to allow for the management and
                maintenance of the service. The admin API is consumed
                strictly by operators. Calls who's effect span
                multiple accounts should be placed in an admin API.
                Admin APIs &SHOULD_NOT; be exposed via public
                endpoints and &SHOULD; have tighter security
                constraints than those of service APIs. It is
                recommended that admin API users and service API users
                authenticate against separate authentication
                systems. All OpenStack services &MUST; implement an
                admin API.
            </para>
            <note>
                <para>
                    The requirement for an additional admin API does
                    not necessarily dictate that two separate
                    implementations of the API be written. Service
                    teams may opt to write a single implementation of
                    the API and expose it via two separate endpoints:
                    a public endpoint and admin endpoint.  In the
                    public endpoint, reverse proxy filters may be
                    employed to cull admin calls before they reach the
                    service implementation.  A different
                    authentication component may also be used at each
                    endpoint to interact with separate authentication
                    systems.
                </para>
            </note>
            <para>
                In the following sections, we propose a set of calls
                that &MUST; be implemented by admin APIs in OpenStack
                and an optional set that &SHOULD; be
                implemented. Together these calls allow for a simple
                and consistent admin API for the management of
                accounts in OpenStack.
            </para>
            <section>
                <title>Required Operations</title>
                <para>
                    The following operations &MUST; be implemented by
                    OpenStack services and &MUST; be made available
                    via the admin API.  At their discretion, service
                    operators &MAY; provide public access to &GET; and
                    &HEAD; operations via the service API.  The &PUT;
                    and &DELETE; calls, however, &SHOULD; be accessible
                    strictly from the admin API.
                </para>
                <section xml:id="getAccountSection">
                    <title>Get Account</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&GET;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Get Account</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>,
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                        Services are not required to provide a
                        representation of an account on a &GET;
                        request. If a representation is retured, it
                        &SHOULD; provide information about the account
                        along with account metadata. Additionally, the
                        representation &MAY; contain a list of top
                        level account resources. The actual format of
                        the representation is service specific.
                    </para>
                    <para>
                        If a service returns an account representation
                        it should return either a response code of
                        <returnvalue>200 (Okay)</returnvalue> or
                        <returnvalue>203 (Non-Authoritative
                        Information)</returnvalue> if the request is
                        cached. If a service does not return a
                        representation, then it &MUST; return a
                        <returnvalue>204 (No Content)</returnvalue>.
                        Generally, a response code in the 200s
                        signifies that the account exists and is
                        valid. A <errorcode>404 (Not
                        Found)</errorcode> signifies that the account
                        does not exist and a <errorcode>410
                        (Gone)</errorcode> means that the account has
                        recently been marked for deletion, is currently
                        unavailable, and may be recoverable. Services
                        may provide an additional operation to recover
                        a recently removed account.
                    </para>
                </section>
                <section>
                    <title>Get Account Metadata</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&HEAD;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Get Account Metadata</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                        A &HEAD; operation &MAY; return metadata for
                        an account. If it does, it &MUST; return the
                        same metadata that would be returned via a
                        &GET; operation. The response to this call
                        &MUST; only contain HTTP headers. As with
                        &GET; requests, a <returnvalue>204 (No
                        Content)</returnvalue> signifies that the
                        account exists and is valid. A <errorcode>404
                        (Not Found)</errorcode> signifies that the
                        account does not exist and a <errorcode>410
                        (Gone)</errorcode> means that the account has
                        recently been marked for deletion, is
                        currently unavailable, and may be
                        recoverable. Again, services may provide an
                        additional operation to recover a recently
                        removed account. The &HEAD; operation may be
                        used as a short-hand for &GET; in cases where
                        the service returns a representation document
                        but the client is not interested in it.
                    </para>
                </section>
                <section>
                    <title>Create an Account</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&PUT;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Create or Modify an Account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>201</returnvalue>,
                        <returnvalue>202</returnvalue>,
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>409</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                        A &PUT; operation can be used to create or
                        (optionally) modify an account.  If a service
                        provides a representation for an account the
                        representation &SHOULD; be included as part of
                        the &PUT; request and it &SHOULD; match the
                        representation retured by &GET;.  One possible
                        use of an account representation is to keep
                        track of an account's tier in cases where the
                        service offers different levels of performance
                        at different tiers.  Here, an operator may
                        create a new account and assign it to a tier
                        with a single &PUT; request. The operator may
                        also update an account's tier by performing
                        additional &PUT;s on the account. On success,
                        a <returnvalue>201 (Created)</returnvalue>
                        should be returned when the account is created
                        and a <returnvalue>202
                        (Accepted)</returnvalue> should be returned
                        when the account is modified.
                    </para>
                    <para>
                        In cases where the account representation
                        offers a list of account resources, the &PUT;
                        operation &SHOULD_NOT; be used to add
                        resources to or remove resources from the
                        account.  Services &MUST; ensure that &PUT;
                        requests are idempotent.  If an account does
                        not have a representation, or the
                        representation is not updatable, a
                        <errorcode>409 (Conflict)</errorcode> may be
                        returned to indicate that an account with the
                        given ID has already been created and may not
                        be updated.
                    </para>
                    <para>
                        Note that a &PUT; operation is used to create
                        a new account <emphasis>with an account
                        ID</emphasis>. This means that the operator is
                        in complete control of the account ID value
                        and that the account ID is
                        <emphasis>not</emphasis> generated by the
                        service. That said, the following are the
                        properties of an account ID that service
                        implementors can rely on.
                    </para>
                    <orderedlist>
                        <listitem>
                            <para>
                                The account ID is a string in the
                                UTF-8 character set.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The UTF-8 string will not be greater
                                than 255 character units and it will
                                not be empty.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The string may contain any character
                                other than the path seperator:
                                <literal>/</literal>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                The UTF-8 string will be properly
                                encoded in the request URL according
                                to the encoding rules defined in RFC
                                1738 <xref
                                linkend="rfc1738"/>. Services &MAY;
                                reject improperly encoded URLs.
                            </para>
                        </listitem>
                    </orderedlist>
                    <para>
                        An OpenStack service should make no
                        assumptions about the account ID other than
                        those listed above. As a result, services
                        &MUST; set aside 255 character units for
                        storing account IDs. Services should also consider
                        long account IDs when imposing limits on the
                        size of a request URL.
                    </para>
                    <para>
                        The following are examples of account IDs and
                        their encoded URLs:
                    </para>
                    <example>
                        <title>Example accounts IDs</title>
                        <informaltable rules="all">
                            <thead>
                                <tr>
                                    <td colspan="1">
                                        <parameter>accountId</parameter>
                                    </td>
                                    <td colspan="4">Sample Encoded URL</td>
                                    <td colspan="1">Valid</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="1">12345</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/12345/widgets</td>
                                    <td colspan="1">Yes</td>
                                </tr>
                                <tr>
                                    <td colspan="1">Bob's Account</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/Bob's%20Account/widgets</td>
                                    <td colspan="1">Yes</td>
                                </tr>
                                <tr>
                                    <td colspan="1">∑∞∆∏</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/%E2%88%91%E2%88%9E%E2%88%86%E2%88%8F/widgets</td>
                                    <td colspan="1">Yes</td>
                                </tr>
                                <tr>
                                    <td colspan="1">resel:sub:acct</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/resel1:sub2:acct3/widgets</td>
                                    <td colspan="1">Yes</td>
                                </tr>
                                <tr>
                                    <td colspan="1">resel\sub\acct</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/resel1\sub2\acct3/widgets</td>
                                    <td colspan="1">Yes</td>
                                </tr>
                                <tr>
                                    <td colspan="1">resel/sub/acct</td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0/resel1/sub2/acct3/widgets</td>
                                    <td colspan="1">No, using path separator.</td>
                                </tr>
                                <tr>
                                    <td colspan="1"></td>
                                    <td colspan="4">https://widgets.openstack.com/v1.0//widgets</td>
                                    <td colspan="1">No, empty.</td>
                                </tr>
                            </tbody>
                        </informaltable>
                    </example>
                    <example>
                        <title>Account ID Sample WADL definition</title>
                        <programlisting language="xml">
<xi:include href="samples/account.wadl" parse="text"/>
                        </programlisting>
                    </example>
                </section>
                <section>
                    <title>Remove an Account</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&DELETE;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Remove an Account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
            </section>
            <section>
                <title>Optional Operations</title>
                <para>
                </para>
                <section>
                    <title>Move a Resource</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&POST;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                <td colspan="3">Move a Resource</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
                <section>
                    <title>Move all Resources</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&POST;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                <td colspan="3">Moves all resources into a destination account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
                <section>
                    <title>Ensuring Consistency</title>
                    <para>
                    </para>
                    <section>
                        <title>Get a Move Action</title>
                        <para>
                        </para>
                        <informaltable rules="all">
                            &LONG_URI_REFHEAD;
                            <tbody>
                                <tr>
                                    <td colspan="1">&GET;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Get resource move action.</td>
                                </tr>
                                <tr>
                                    <td colspan="1">&GET;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Get all resource move action.</td>
                                </tr>
                            </tbody>
                        </informaltable>
                        <simpara>
                            &CODES;
                            <returnvalue>200</returnvalue>,
                            <returnvalue>203</returnvalue>
                        </simpara>
                        <simpara>
                            &ERROR_CODES;
                            <errorcode>404</errorcode>,
                            <errorcode>410</errorcode>,
                            <errorcode>409</errorcode>,
                            others &hellip;
                        </simpara>
                        <example>
                            <title>Get Move Action Request</title>
                            <literallayout class="monospaced">
 GET /v1.0/17776666/action/move?dest=176625343 HTTP/1.1
 Host: service.openstack.com
                            </literallayout>
                        </example>
                        <example>
                            <title>Get Move Action Response (Manual)</title>
                            <literallayout class="monospaced">
 HTTP/1.1 200 Okay
 Date: Mon, 12 Nov 2010 15:55:01 GMT
 Content-Type: application/xml; charset=UTF-8
 Etag: "08c8c8b21e336fb492aa3995d4d7bc8dc6b6fa32"
                            </literallayout>
                            <programlisting language="xml">
<xi:include href="samples/move2.xml" parse="text"/>
                            </programlisting>
                        </example>
                        <para>
                            In manual mode the operator is responsible for
                            making sure that that resources in a
                            correct state.  The move action simply
                            documents tags form each resource.
                        </para>
                        <example>
                            <title>Get Move Action Response (Simple)</title>
                            <literallayout class="monospaced">
 HTTP/1.1 200 Okay
 Date: Mon, 12 Nov 2010 15:55:01 GMT
 Content-Type: application/xml; charset=UTF-8
 Etag: "e6a92ec2fe5fba022c31c32c97ea455cee4b2736"
                            </literallayout>
                            <programlisting language="xml">
<xi:include href="samples/move.xml" parse="text"/>
                            </programlisting>
                        </example>
                        <para>
                            The operator takes less of a role in
                            simple mode.  Here, the tags are
                            consolidated into a simple tag.  If any
                            resource is in a bad state a
                            <errorcode>409 (Conflict)</errorcode>
                            is returned. Services &SHOULD; support
                            simple mode.
                        </para>
                    </section>
                    <section>
                        <title>Conditional Move</title>
                        <para>
                        </para>
                        <informaltable rules="all">
                            &LONG_URI_REFHEAD;
                            <tbody>
                                <tr>
                                    <td colspan="1">&POST;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Perform a conditional move operation on a resource..</td>
                                </tr>
                                <tr>
                                    <td colspan="1">&POST;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Perform a conditional move operation on all resources.</td>
                                </tr>
                            </tbody>
                        </informaltable>
                        <simpara>
                            &CODES;
                            <returnvalue>200</returnvalue>,
                            <returnvalue>203</returnvalue>
                        </simpara>
                        <simpara>
                            &ERROR_CODES;
                            <errorcode>404</errorcode>,
                            <errorcode>410</errorcode>,
                            <errorcode>409</errorcode>,
                            <errorcode>412</errorcode>,
                            others &hellip;
                        </simpara>
                        <example>
                            <title>Conditional Move Request</title>
                            <literallayout class="monospaced">
 POST /v1.0/17776666/action/move?dest=176625343 HTTP/1.1
 Host: service.openstack.com
 If-Match: "e6a92ec2fe5fba022c31c32c97ea455cee4b2736"
 Content-Type: application/xml
                            </literallayout>
                            <programlisting language="xml">
<xi:include href="samples/move.xml" parse="text"/>
                            </programlisting>
                        </example>
                    </section>
                </section>
            </section>
        </section>
    </section>
    <section>
        <title>Questions and Answers</title>
        <qandaset defaultlabel="number">
            <qandaentry>
                <question>
                    <para>
                    </para>
                </question>
                <answer>
                    <para>
                    </para>
                </answer>
            </qandaentry>
        </qandaset>
    </section>
    <bibliography>
        <title>References</title>
        <biblioentry xml:id="rfc1738">
            <author>
                <personname>
                    <surname>Berners-Lee</surname>
                    <othername role="fi">T</othername>
                </personname>
                <affiliation>
                    <orgname>CERN</orgname>
                </affiliation>
            </author>
            <author>
                <personname>
                    <surname>Masinter</surname>
                    <othername role="fi">L</othername>
                </personname>
                <affiliation>
                    <orgname>Xerox Corporation</orgname>
                </affiliation>
            </author>
            <author>
                <personname>
                    <surname>McCahill</surname>
                    <othername role="fi">M</othername>
                </personname>
                <affiliation>
                    <orgname>University of Minnesota</orgname>
                </affiliation>
            </author>
            <title>Uniform Resource Locators (URL)</title>
            <releaseinfo>
                <link
                    xlink:href="http://tools.ietf.org/html/rfc1738">http://tools.ietf.org/html/rfc1738</link>
            </releaseinfo>
        </biblioentry>
    </bibliography>
</article>
