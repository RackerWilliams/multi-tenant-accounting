<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY HEAD   '<command xmlns="http://docbook.org/ns/docbook">HEAD</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CODES       'Normal Response Code(s):'>
        <!ENTITY ERROR_CODES 'Error Response Code(s):'>

        <!ENTITY LONG_URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="4">URI</td>
              <td colspan="3">Description</td>
            </tr>
          </thead>'>
        <!ENTITY URI_REFHEAD '
          <thead xmlns="http://docbook.org/ns/docbook">
            <tr>
              <td colspan="1">Verb</td>
              <td colspan="1">URI</td>
              <td colspan="4">Description</td>
            </tr>
          </thead>'>


        <!-- Useful for specs -->
        <!ENTITY MAY    '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
        <!ENTITY SHOULD_NOT '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD NOT</emphasis>'>

]>

<article version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook"
         class="specification"
         status="draft">
    <info>
        <title>Multi-Tenancy in OpenStack</title>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Jorge</firstname>
                    <surname>Williams</surname>
                    <othername role="mi">L</othername>
                </personname>
                <email>jorge.williams@rackspace.com</email>
            </author>
            <author>
                <personname>
                    <firstname>Ziad</firstname>
                    <surname>Sawalha</surname>
                    <othername role="mi">N</othername>
                </personname>
                <email>ziad.sawalha@rackspace.com</email>
            </author>
            <author>
                <personname>
                    <firstname>Khaled</firstname>
                    <surname>Hussein</surname>
                </personname>
                <email>khaled.hussein@rackspace.com</email>
            </author>
        </authorgroup>
        <abstract>
            <para>
                As a cloud computing platform, OpenStack must support
                the concept of multi-tenancy. A common approach to
                organizing resources by 'tenant' across services is
                needed to be able to correlate usage tracking,
                auditing, authorization, etc... And within each
                multi-tenant service, the ability to identify each
                tenant's resources (for various reasons such as
                security, accounting, isolation, etcâ€¦) is also
                key. However, the definition of a 'tenant' will vary
                by operator and by deployment. This blueprint
                therefore proposes creating a lightweight standard for
                service developers to implement tenancy and resource
                grouping without a-priori knowledge of billing and
                accounting processes specific to the operator of an
                OpenStack deployment.
            </para>
            <para>
                The purpose of this blueprint is to define a standard
                method of organizing resources in OpenStack. Resource
                organization is important because most cloud service
                deployments are multi-tenant. Building multi-tenant
                services is complicated and often involves knowledge
                of buisness processes that vary from one organization
                to another. In this blueprint, we propose a method of
                organizing resources that allows multi-tenancy to be
                implemented on top of OpenStack services. This
                approach will lower barriers to service deleopers by
                allowing them to develop services without a-priori
                knowledge of billing and accounting processes of the
                organization in which the services are
                deployed. Likewise, organization will be given
                flexability in the manner in which they deploy and
                offer OpenStack services.
            </para>
        </abstract>
        <keywordset>
            <keyword>OpenStack</keyword>
            <keyword>Multi-Tenancy</keyword>
            <keyword>Resource Organization</keyword>
        </keywordset>
    </info>
    <section>
        <title>Rationale and Goals</title>
        <para>
        </para>
    </section>
    <section>
        <title>Specification Overview</title>
        <para>
        </para>
        <figure xml:id="both">
            <title>Multi-Tenancy Overview</title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" scale="65" format="svg"
                               fileref="images/AccountModel4.svg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section>
            <title>Accounts and Tenants</title>
            <para>
            </para>
        </section>
        <section>
            <title>Account Lifecycle</title>
            <para>
            </para>
        </section>
        <section>
            <title>Admin API</title>
            <para>
                A <emphasis role="italic">service api</emphasis> is an
                API that's made available to most clients &mdash; it
                is the public API most users consume.  In contrast, an
                <emphasis role="italic">admin api</emphasis> is an
                implementation of the service API with additoinal
                calls to allow for the management and maintence of the
                service. The admin API is consumed strictly by
                operators. Calls who's effect span multiple accounts
                should be placed in an admin API.  Admin APIs
                &SHOULD_NOT; be exposed via public endpoints and
                &SHOULD; have tighter security constraints than those
                of service APIs. It is recommended that admin API
                users and service API users authenticate against
                separate authentication systems. All OpenStack
                services &MUST; implement an admin API.
            </para>
            <note>
                <para>
                    The requirement for an additional admin API does
                    not necessarily dictate that two separate
                    implementations of the API be written. Service
                    teams may opt to write a single implementation of
                    the API and expose it via two spearate endpoints:
                    a public endpoint and admin endpoint.  In the
                    public endpoint, a reverse proxy filters may be
                    employed to cull admin calls before they reach the
                    service implementation.  A different
                    authentication component may also be used at each
                    endpoint to interact with separate authentication
                    systems.
                </para>
            </note>
            <para>
                In the following sections, we propose a set of calls
                that &MUST; be implemented by admin APIs in OpenStack
                and an optional set that &SHOULD; be
                implemented. Together these calls allow for a simple
                and consistent admin API for the management of
                accounts in OpenStack.
            </para>
            <section>
                <title>Required Operations</title>
                <para>
                    The following operations &MUST; be implemented by
                    OpenStack services and &MUST; be made available
                    via the admin API.  At their desgretion, service
                    operators &MAY; provide public access to &GET; and
                    &HEAD; operations via the service API.  The &PUT;
                    and &DELETE; calls, however, should be accessible
                    strictly from the admin API.
                </para>
                <section>
                    <title>Get Account</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&GET;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Get Account</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>,
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                        A &GET; operation &MAY; return a
                        representation of the account along with
                        account metadata. The representation &MAY;
                        contain information that applies to all of the
                        resources that are contained in the
                        account. Additonally, the representation may
                        contain a list of top level resources. The
                        actual format of the representation is service
                        specific. Additonally, services may opt to not
                        provide a representation at all.
                    </para>
                    <para>
                        If a service returns an account representation
                        it should return either a response code of
                        <returnvalue>200 (Okay)</returnvalue> or
                        <returnvalue>203 (Non-Authoritave
                        Information)</returnvalue> if the request is
                        cached. If a service does not return a
                        representation, then it &MUST; return a
                        <returnvalue>204 (No Content)</returnvalue>.
                        Generally, a response code in the 200s
                        significes that the account exists and is
                        valid. A <errorcode>404 (Not
                        Found)</errorcode> signifies that the account
                        does not exist and a <errorcode>410
                        (Gone)</errorcode> means that the account has
                        recently been marked for deletion, is currently
                        unavailable, and may be recoverable. Services
                        may provide an addtional operation to recover
                        a recently removed account.
                    </para>
                </section>
                <section>
                    <title>Get Account Metadata</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&HEAD;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Get Account Metadata</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                        A &HEAD; operation &MAY; return metadata for
                        the account. If it does it &MUST; return the
                        same metadata that would be return via a &GET;
                        operation. The response to this call &MUST;
                        contain only HTTP headers. As with a &GET;
                        requests, a <returnvalue>204 (No
                        Content)</returnvalue> signifies that the
                        account exists and is valid. A <errorcode>404
                        (Not Found)</errorcode> signifies that the
                        account does not exist and a <errorcode>410
                        (Gone)</errorcode> means that the account has
                        recently been marked for deletion, is
                        currently unavailable, and may be
                        recoverable. Again, services may provide an
                        addtional operation to recover a recently
                        removed account. The &HEAD; operation may be
                        used as a short-hand for &GET; in cases where
                        the service returns a representation document
                        but the client is not intersted in it.
                    </para>
                </section>
                <section>
                    <title>Create an Account</title>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&PUT;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Create an Account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>,
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>409</errorcode>,
                        others &hellip;
                    </simpara>
                    <para>
                    </para>
                </section>
                <section>
                    <title>Remove an Account</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&DELETE;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter></td>
                                <td colspan="3">Remove an Account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
            </section>
            <section>
                <title>Optional Operations</title>
                <para>
                </para>
                <section>
                    <title>Move a Resource</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&POST;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                <td colspan="3">Move a Resource</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
                <section>
                    <title>Move all Resources</title>
                    <para>
                    </para>
                    <informaltable rules="all">
                        &LONG_URI_REFHEAD;
                        <tbody>
                            <tr>
                                <td colspan="1">&POST;
                                </td>
                                <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                <td colspan="3">Moves all resources into a destination account.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                    <simpara>
                        &CODES;
                        <returnvalue>204</returnvalue>,
                        <returnvalue>202</returnvalue>
                    </simpara>
                    <simpara>
                        &ERROR_CODES;
                        <errorcode>404</errorcode>,
                        <errorcode>410</errorcode>,
                        others &hellip;
                    </simpara>
                </section>
                <section>
                    <title>Ensuring Consistency</title>
                    <para>
                    </para>
                    <section>
                        <title>Get a Move Action</title>
                        <para>
                        </para>
                        <informaltable rules="all">
                            &LONG_URI_REFHEAD;
                            <tbody>
                                <tr>
                                    <td colspan="1">&GET;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Get resource move action.</td>
                                </tr>
                                <tr>
                                    <td colspan="1">&GET;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Get all resource move action.</td>
                                </tr>
                            </tbody>
                        </informaltable>
                        <simpara>
                            &CODES;
                            <returnvalue>200</returnvalue>,
                            <returnvalue>203</returnvalue>
                        </simpara>
                        <simpara>
                            &ERROR_CODES;
                            <errorcode>404</errorcode>,
                            <errorcode>410</errorcode>,
                            <errorcode>409</errorcode>,
                            others &hellip;
                        </simpara>
                    </section>
                    <section>
                        <title>Conditional Move</title>
                        <para>
                        </para>
                        <informaltable rules="all">
                            &LONG_URI_REFHEAD;
                            <tbody>
                                <tr>
                                    <td colspan="1">&POST;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/path/to/resource/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Perform a conditional move operation on a resource..</td>
                                </tr>
                                <tr>
                                    <td colspan="1">&POST;
                                    </td>
                                    <td colspan="4">/<parameter>version</parameter>/<parameter>accountId</parameter>/action/move?<parameter>dest</parameter>=<literal>accountId</literal></td>
                                    <td colspan="3">Perform a conditional move operation on all resources.</td>
                                </tr>
                            </tbody>
                        </informaltable>
                        <simpara>
                            &CODES;
                            <returnvalue>200</returnvalue>,
                            <returnvalue>203</returnvalue>
                        </simpara>
                        <simpara>
                            &ERROR_CODES;
                            <errorcode>404</errorcode>,
                            <errorcode>410</errorcode>,
                            <errorcode>409</errorcode>,
                            <errorcode>412</errorcode>,
                            others &hellip;
                        </simpara>
                    </section>
                </section>
            </section>
        </section>
    </section>
    <section>
        <title>Questions and Answers</title>
        <qandaset defaultlabel="number">
            <qandaentry>
                <question>
                    <para>
                    </para>
                </question>
                <answer>
                    <para>
                    </para>
                </answer>
            </qandaentry>
        </qandaset>
    </section>
</article>
